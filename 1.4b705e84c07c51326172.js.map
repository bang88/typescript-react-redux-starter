{"version":3,"sources":["webpack:///./src/routes/Counter/containers/CounterContainer.ts","webpack:///./src/routes/Counter/modules/counter.ts","webpack:///./src/routes/Counter/components/Counter.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,yCACC;AAAD,qCAOC;;;;;AAAD,qCAMC;;;;AAAD,KAAuB,oBAAG;AAClB;AACK;AAAE,oBAAM,UAAS,UAAG;;AAC7B,gCAEJ;AAJS;AAIR;AAED,KAAqB,2CAAc;AAAX;AACf,kBAAO,MACd;AAFkC;;AAsBpC;mBAAe,cAAO,QAAgB,iBAAoB,mBAAC,UAAQ,S;;;;;;;;;;ACzC5B;;;;;;;AAC1B,SAAiB,oBAIS;;;;AACvC;SAAgC,8DAAI;;AAC5B;AACA,eAAE,QAAiB;AAChB,kBAEX;AAJS;AAIR;AALe,SAAS,YAae;;;;;;;;AAE3B,SAAW,cAAG;AACnB,YAAC,UAAS,UAAU;AAClB,oBAAY,QAAC,UAAQ;AACf,wBAAC;AACD,0BAAU,UAAW,WAAU;AAEzC;AAAC,gBACH;AACF,UANS;AAOX;AAAC;AAEY,SAAO;AAClB,gBAAS;AACT,0BAKqC;AAPhB;;;;AAQvB,2CACG,QAAkB,6BAAQ,OAAQ;AAAd,YAAwB,QAAS,OAKjB;EALrC;;;;AAMF,KAAkB,eAAI;AACtB;SAA6C,8DAAe;SAAQ;;AAClE,SAAa,UAAkB,gBAAO,OAAM;AAEtC,YAAQ,UAAU,QAAM,OAAS,UACzC;AAAC;AAJD;mBAIC,e;;;;;;;;;;;;;;;;;;;;ACtDD,KAAiB,4BAEjB;;;;;;;;;;;;;;AAEe,oBACH,oBAAI,aAIZ;AACH;;;;GAR0B,MACjB;;AASV;mBAAuB,Q","file":"1.chunk.js","sourcesContent":["import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapActionCreators = () => {\n  return {\n    increment: () => increment(1),\n    doubleAsync\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  counter: state.counter\n})\n\n/*  Note:\n\n     mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data,\n     allowing Redux to store the minimal possible state.\n    Selectors are efficient.\n     A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapActionCreators)(Counter)\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/tslint-loader!./src/routes/Counter/containers/CounterContainer.ts\n **/","// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type: COUNTER_INCREMENT,\n    payload: value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk!\n\n    NOTE: This is solely for demonstration purposes. In a real application,\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\n    reducer take care of this logic.  */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch(increment(getState().counter))\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT]: (state, action) => state + action.payload\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/tslint-loader!./src/routes/Counter/modules/counter.ts\n **/","import * as React from 'react';\n\nclass Counter extends React.Component<any, any> {\n    render() {\n        return (\n            <div>\n                Counter\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/tslint-loader!./src/routes/Counter/components/Counter.tsx\n **/"],"sourceRoot":""}